{% set body_classes_slot = "template-locations" %}
{% extends 'partials/base.html.twig' %}

{% set flex = grav.get('flex_objects') %}
{% set locations = flex.directory('locations') %}
{% set collection = locations.getCollection() %}
{% set cities = flex.directory('cities') %}
{% set citiesCol = cities.getCollection() %}

{% set amenities = uri.param('amenities') %}
{% set search = uri.param('search') %}
{% set city = uri.param('city') %}

{% if search %}
	{% set collection = collection.search(search) %}
{% endif %}

{% if amenities %}
	{% set amenities = amenities|split(',') %}
  {% set collection = collection.filterByAmenities(amenities) %}
{% endif %}

{% if city %}
	{% set collection = collection.filterBy({ 'city': city }) %}
{% endif %}

{% block javascripts %}
	{% do assets.addJs('theme://js/alpinejs-collapse.min.js', {'loading': 'defer', 'priority': 99}) %}
	{% do assets.addJs('https://maps.googleapis.com/maps/api/js?key=AIzaSyAryZvmZHDUIxifP2P2j3-GOMl2w9VwNQY&callback=initMap&v=weekly', {'loading': 'defer', 'priority': 97}) %}
	{{ parent() }}
{% endblock %}

{% set map %}
let lat = '{{ header.map_default_lat ?? null }}'
let long = '{{ header.map_default_long ?? null }}'

navigator.geolocation.getCurrentPosition(function(position) {
  console.log(lat)
  lat = position.coords.latitude;
  long = position.coords.longitude;
  window.initMap()
});

function initMap() {
  const loc = { 
    lat: Number(lat), 
    lng: Number(long)
  };
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 18,
    center: loc,
  });
  const marker = new google.maps.Marker({
    position: loc,
    map: map,
  });
}
                    
window.initMap = initMap;
{% endset %}
{# {% do assets.addInlineJs(map, {id: 'google-map', group: 'bottom'}) %} #}

{% block hero %}
	<div class="flex items-center py-20 px-4 bg-center relative min-h-[16rem] sm:min-h-[20rem] lg:min-h-[24rem] bg-gray-100">
		<div id="map" class="h-full w-full absolute pin"></div>
	</div>
{% endblock %}

{% block content %}
	<div x-data="megaSearchComponent" {% if city %}x-init="city = '{{ city }}'"{% endif %} class="container mx-auto pt-8 pb-16 sm:pt-10 sm:pb-16 md:py-20">
		<div class="px-4">
			<div class="flex flex-col-reverse sm:flex-col">
				<div class="mb-6 sm:mb-0" id="sort-by-amenities">
					<h2 class="text-2xl sm:text-3xl text-accent relative cursor-pointer" @click="amenitiesExpanded = !amenitiesExpanded">
						Sort by Amenities
						<button>
							<svg x-bind:class="amenitiesExpanded && 'rotate-180'" class="absolute right-0 top-1/2 -translate-y-1/2 transition-all" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
								<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
							</svg>
						</button>
					</h2>
					<div class="flex flex-wrap" x-init="{% if amenities %}amenities = '{{ amenities|join(',') }}'.split(','){% endif %}" x-show="amenitiesExpanded" x-collapse>
						<div class="h-6 w-full"></div>
						{% for key,value in gravel_utils.getAmenitiesList %}
							<div class="form-control mr-6">
								<label class="cursor-pointer label flex flex-row-reverse">
									<span class="label-text">{{ value }}</span>
									<input type="checkbox" class="checkbox checkbox-secondary mr-3" value="{{ key }}" x-bind:checked="amenities.includes('{{ key }}')" @change="amenitiesChangeHandler($event)"/>
								</label>
							</div>
						{% endfor %}
					</div>
				</div>
				<div>
					<h2 class="text-2xl sm:text-3xl text-accent mb-4 sm:mb-6 block sm:hidden">
						Search
					</h2>
					<div class="flex flex-col sm:flex-row justify-between mb-8 sm:my-8">
						<input type="text" placeholder="What are you looking for?" class="input input-bordered w-full mb-4 sm:mr-4 md:mr-8 flex-1 min-h-12" x-model="keywords" x-init="{% if search %}keywords = '{{ search }}'{% endif %}" @keyup.enter="$refs.searchBtn.click()" />
						<div id="city-input-wrapper" class="relative w-full mb-4 sm:mr-4 md:mr-8 flex-1 z-10">
							<input @input="citiesExpanded = true" id="city-input" x-model="cityInput" type="text" placeholder="All Cities" class="input input-bordered min-h-12 w-full" />
							<ul x-show="citiesExpanded" @click.outside="citiesExpanded = false, cityInput = '', city = ''" id="cities-list" class="absolute pin-x w-full bg-base-100 rounded-lg border shadow-lg" style="border-color: #e5e7eb;">
								<template x-for="c in matchedCities">
										<li>
											<button 
												x-bind:data-city-slug="c.slug" 
												x-text="c.ascii_name + ', ' + c.country_long"
												class="py-2 px-4 hover:bg-primary hover:text-white w-full text-left"
												@click="$nextTick(() => { city = c.slug, cityInput = c.ascii_name + ', ' + c.country_long, citiesExpanded = false })">
											</button>
										</li>
								</template>
							</ul>
						</div>

						{# <select class="select select-bordered w-full flex-1 mb-4 sm:mr-4 md:mr-8 hidden" x-model="city" x-init="{% if city %}city = '{{ city }}'{% endif %}">
							{% if citiesCol is not empty %}
								<option {% if not city %}selected{% endif %}>All Cities</option>
								{% for c in citiesCol %}
									<option value="{{ c.slug }}" {% if city == c.slug %} selected {% endif %}>{{ c.name }}</option>
								{% endfor %}
							{% else %}
								<option value="" disabled selected>No cities found.</option>
							{% endif %}
						</select> #}
						<button x-bind:data-href="query" @click="replaceResults" class="btn btn-primary min-w-[90px] before:!mr-0" x-bind:class="loading && 'loading'" x-ref="searchBtn" x-text="loading ? '' : 'Search'"></button>
					</div>
				</div>
			</div>
			<ul id="results-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-x-4 lg:gap-x-8 gap-y-8">
				{% for obj in collection %}
					{% set cityObj = gravel_utils.getCityObjectByKey(obj.city) %}
					{% do obj.setProperty('city_name', cityObj.name) %}
					{% do obj.setProperty('country_long', cityObj.country_long) %}
					{% render obj layout: 'grid-item' %}
				{% endfor %}
			</ul>
		</div>
	</div>
{% endblock %}
