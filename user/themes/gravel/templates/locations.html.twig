{% set body_classes_slot = "template-locations" %}
{% extends 'partials/base.html.twig' %}

{% set flex = grav.get('flex_objects') %}
{% set locations = flex.directory('locations') %}
{% set collection = locations.getCollection() %}
{% set cities = flex.directory('cities') %}
{% set citiesCol = cities.getCollection() %}

{% set amenities = uri.param('amenities') %}
{% set search = uri.param('search') %}
{% set city = uri.param('city') %}

{% if search %}
	{% set collection = collection.search(search) %}
{% endif %}

{% if amenities %}
	{% set amenities = amenities|split(',') %}
  {% set collection = collection.filterByAmenities(amenities) %}
{% endif %}

{% if city %}
	{% set collection = collection.filterBy({ 'city': city }) %}
	{% set filteredCityObj = gravel_utils.getCityObjectByKey(city) %}
{% endif %}

{% block javascripts %}
	{% do assets.addJs('theme://js/alpinejs-collapse.min.js', {'loading': 'defer', 'priority': 99}) %}
	{% do assets.addJs('https://maps.googleapis.com/maps/api/js?key=AIzaSyAryZvmZHDUIxifP2P2j3-GOMl2w9VwNQY&callback=initMap&v=weekly', {'loading': 'defer', 'priority': 97}) %}
	{{ parent() }}
{% endblock %}

{% set map %}
let lat = '{{ header.map_default_lat ?? null }}'
let long = '{{ header.map_default_long ?? null }}'

{# navigator.geolocation.getCurrentPosition(function(position) {
  console.log(lat)
  lat = position.coords.latitude;
  long = position.coords.longitude;
  window.initMap()
}); #}

{% if filteredCityObj %}
function initMap() {
  let loc = { 
    lat: Number(lat), 
    lng: Number(long)
  };

	loc = {
		lat: {{- filteredCityObj.lat -}},
		lng: {{- filteredCityObj.lng -}}
	}

  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 11,
    center: loc,
  });

	var infowindow = new google.maps.InfoWindow();

	fetch('/locations.json/city:{{filteredCityObj.slug}}')
		.then((response) => {
			return response.json()
		})
		.then((locations) => {
			Object.values(locations).forEach(val => {
				let marker = new google.maps.Marker({
					position: new google.maps.LatLng(val['lat'], val['lng']),
					map: map
				})

        let markup = `
            <a href="/locations/${val['slug']}" class="text-center font-poppins leading-tight">
							<div class="font-bold leading-tight text-[16px]">${val['name']}</div>
              <div class="">
                Overall Rating: ${val['rating_overall'] / 2}
              </div>
              <button class="btn btn-primary btn-xs w-full mt-[4px]">View Cafe</button>
						</a>
        `

				google.maps.event.addListener(marker, 'click', (function(marker) {
					return function() {
						infowindow.setContent(markup);
						infowindow.open(map, marker);
					}
				})(marker));
			});
		})
		.catch((error) => {
			console.error('Error:', error);
		});
}
                    
window.initMap = initMap;
{% else %}
window.initMap = () => {
	console.log('No city chosen. Map not initialized.')
}
{% endif %}
{% endset %}
{% do assets.addInlineJs(map, {id: 'google-map', group: 'bottom'}) %}

{% block hero %}
	<div class="flex items-center py-20 px-4 bg-center relative min-h-[16rem] sm:min-h-[20rem] lg:min-h-[24rem] bg-gray-100">
		<div id="map" class="h-full w-full absolute pin" {% if not city %}style="display: none;"{% endif %}></div>
		<div id="no-map-content" class="h-full w-full absolute pin" {% if city %}style="display: none;"{% endif %}>
			<div  class="hero-overlay absolute pin bg-black opacity-30 z-10"></div>
				{{ page.media.images|first.cropZoom(2000, 680).html('', 'background map image', 'object-cover h-full w-full')|raw }}
				<div class="absolute top-1/2 left-1/2 z-20">
					<div class="text-xl sm:text-2xl font-bold px-4 tracking-wider text-white -translate-x-1/2 -translate-y-1/2 text-center">
						Select a city to see a map of locations.
					</div>
				</div>
		</div>
	</div>
{% endblock %}

{% block content %}
	<div x-data="megaSearchComponent" {% if city %}x-init="city = '{{ city }}'"{% endif %} class="container mx-auto pt-8 pb-16 sm:pt-10 sm:pb-16 md:py-20">
		<div class="px-4">
			<div class="flex flex-col-reverse sm:flex-col">
				<div class="mb-6 sm:mb-0" id="sort-by-amenities">
					<h2 class="text-2xl sm:text-3xl text-accent relative cursor-pointer" @click="amenitiesExpanded = !amenitiesExpanded">
						Search by Amenities
						<button>
							<svg x-bind:class="amenitiesExpanded && 'rotate-180'" class="absolute right-0 top-1/2 -translate-y-1/2 transition-all" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
								<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
							</svg>
						</button>
					</h2>
					<div class="flex flex-wrap" x-init="{% if amenities %}amenities = '{{ amenities|join(',') }}'.split(','){% endif %}" x-show="amenitiesExpanded" x-collapse>
						<div class="h-6 w-full"></div>
						{% for key,value in gravel_utils.getAmenitiesList %}
							<div class="form-control mr-6">
								<label class="cursor-pointer label flex flex-row-reverse">
									<span class="label-text">{{ value }}</span>
									<input type="checkbox" class="checkbox checkbox-secondary mr-3" value="{{ key }}" x-bind:checked="amenities.includes('{{ key }}')" @change="amenitiesChangeHandler($event)"/>
								</label>
							</div>
						{% endfor %}
					</div>
				</div>
				<div>
					<h2 class="text-2xl sm:text-3xl text-accent mb-4 sm:mb-6 block sm:hidden">
						Search
					</h2>
					<div class="flex flex-col sm:flex-row justify-between mb-8 sm:my-8">
						<input type="text" placeholder="What are you looking for?" class="input input-bordered w-full mb-4 sm:mr-4 md:mr-8 flex-1 min-h-12" x-model="keywords" x-init="{% if search %}keywords = '{{ search }}'{% endif %}" @keyup.enter="$refs.searchBtn.click()" />
						<div @click.outside="cityWrapperClickOutsideHandler" id="city-input-wrapper" class="relative w-full mb-4 sm:mr-4 md:mr-8 flex-1 z-10">
							<input @focus="citiesExpanded = true" @input="citiesExpanded = true" id="city-input" x-model="cityInput" type="text" placeholder="All Cities" class="input input-bordered min-h-12 w-full" />
							<ul x-show="citiesExpanded" id="cities-list" class="absolute pin-x w-full bg-base-100 rounded-lg border shadow-lg" style="border-color: #e5e7eb;">
								<li>
									<button 
										class="py-2 px-4 hover:bg-primary hover:text-white w-full text-left"
										@click="$nextTick(() => { city = '', cityInput = '' })">
										All Cities
									</button>
								</li>
								<template x-for="c in matchedCities">
										<li>
											<button 
												x-bind:data-city-slug="c.slug" 
												x-text="c.ascii_name + ', ' + c.country_long"
												class="py-2 px-4 hover:bg-primary hover:text-white w-full text-left"
												@click="$nextTick(() => { city = c.slug, cityInput = c.ascii_name + ', ' + c.country_long, citiesExpanded = false })">
											</button>
										</li>
								</template>
							</ul>
						</div>
						<button x-bind:data-href="query" @click="sendAjaxSearch" class="btn btn-primary min-w-[90px] before:!mr-0" x-bind:class="loading && 'loading'" x-ref="searchBtn" x-text="loading ? '' : 'Search'"></button>
					</div>
				</div>
			</div>
			<ul id="results-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-x-4 lg:gap-x-8 gap-y-8">
				{% for obj in collection %}
					{% set cityObj = gravel_utils.getCityObjectByKey(obj.city) %}
					{% do obj.setProperty('city_name', cityObj.name) %}
					{% do obj.setProperty('country_long', cityObj.country_long) %}
					{% render obj layout: 'grid-item' %}
				{% endfor %}
			</ul>
		</div>
	</div>
{% endblock %}

{% set inlineCss %}
.gm-style-iw.gm-style-iw-c {
  padding-left: 18px;
  padding-top: 18px;
  padding-bottom: 6px !important;
}
{% endset %}
{% do assets.addInlineCss(inlineCss) %}
