title: Articles
description: Blog articles
type: flex-objects

# Flex Configuration
config:
  # Administration Configuration
  admin:
    # Admin router (optional)
    router:
      path: "/articles"

    # Admin menu (optional)
    menu:
      list:
        route: "/articles"
        title: Articles
        icon: fa-pencil
        # Authorization to collection admin
        authorize: ["admin.articles.list", "admin.super"]
        # Priority -10 .. 10 (highesgitt goes up)
        priority: 0

    # Admin template type / folder
    template: default

    # Permissions
    permissions:
      # Primary permissions
      admin.articles:
        type: crudpl
        label: Articles

    # List view
    list:
      title: name
      fields:
        published:
        published_on:
        title:
          link: edit
        tags:
        categories:

    # Edit View
    edit:
      title:
        template: "{{ object.title ?? 'Blog Article' }}"

    # Preview View
    preview:
      enabled: false
      route:
        #template: '/plugins/flex-objects/directory:cities'

    # Data Export
    export:
      enabled: true
      method: "jsonSerialize"
      formatter:
        class: 'Grav\Framework\File\Formatter\YamlFormatter'
      filename: "articles"

  # Site Configuration
  site:
    templates:
      collection:
        # Lookup for the template layout files for collections of objects
        paths:
          - "flex/{TYPE}/collection/{LAYOUT}{EXT}"
      object:
        # Lookup for the template layout files for objects
        paths:
          - "flex/{TYPE}/object/{LAYOUT}{EXT}"
      defaults:
        # Default template {TYPE}; overridden by filename of this blueprint if template folder exists
        type: articles
        # Default template {LAYOUT}; can be overridden in render calls (usually Twig in templates)
        layout: default

  # Data Configuration
  data:
    # Object class to be used, allowing custom methods for the object
    object: 'Grav\Common\Flex\Types\Generic\GenericObject'
    # Collection class to be used, allowing custom methods for the collections
    collection: 'Grav\Common\Flex\Types\Generic\GenericCollection'
    # Index class to be used, works as a quick database-like lookup index
    index: 'Grav\Common\Flex\Types\Generic\GenericIndex'
    storage:
      # Storage class, use single file storage (does not support images and assets)
      class: 'Grav\Framework\Flex\Storage\FolderStorage'
      options:
        formatter:
          # File formatter class, in this case the file is stored in markdown
          class: 'Grav\Framework\File\Formatter\JsonFormatter'
        # JSON file where all the objects will be stored
        folder: user-data://articles
    search:
      # Search options
      options:
        contains: 1
      # Fields to be searched
      fields:
        - published
        - title
        - tags
        - categories

form:
  validation: loose

  fields:
    published:
      type: toggle
      label: PLUGIN_ADMIN.PUBLISHED
      highlight: 1
      options:
          1: PLUGIN_ADMIN.YES
          0: PLUGIN_ADMIN.NO
      validate:
          type: bool

    title:
      type: text
      autofocus: true
      label: Title
      validate:
        required: true

    images:
      type: file
      label: Images
      destination: '@page:/gravel-media'
      help: 'The image in the first position will be used as the featured image for this article.'
      multiple: true
      filesize: 4
      accept:
        - image/*
    
    content:
      classes: frontmatter
      type: editor
      label: Content
      autofocus: true
      validate:
        required: true
      codemirror:
        mode: 'yaml'
        indentUnit: 4
        autofocus: true
        indentWithTabs: false
        lineNumbers: true
        styleActiveLine: true
        gutters: ['CodeMirror-lint-markers']
        lint: true

    published_on:
      type: date
      label: Published On
      validate:
        required: true

    created_on:
      type: date
      label: Created On
      validate:
        required: true

    tags:
      type: selectize
      selectize:
        data-options@: ['\Grav\Plugin\Gravel\Utils::getTaxonomiesForSelectizeByType', 'article_tag']
      size: large
      label: Article Tags
      classes: fancy
      validate:
          type: commalist

    categories:
      type: selectize
      selectize:
        data-options@: ['\Grav\Plugin\Gravel\Utils::getTaxonomiesForSelectizeByType', 'article_category']
      size: large
      label: Article Categories
      classes: fancy
      validate:
          type: commalist

